# This workflow
# + computes a semantic version,
# + builds and tests the active branch,
# + packs a NuGet with the given configuration,
# + stores the package as artifact
# + and publishes the package on pushes and manual runs.
#
# It's assumed that all source files reside in a directory 'src' inside the root of the repository.
# This workflow must be called from other workflows.

name: Build, test & pack

on:
  workflow_call: # Called by other workflows only.
    inputs:
      configuration:
        description: 'Define whether this is a debug or a release build.'
        required: true
        type: string
      do_pack:
        description: 'If this build should be packed as NuGet package.'
        required: true
        type: boolean
      is_prerelease:
        # Decides whether a pre-release suffix is needed.
        description: 'Define if this is a prerelease.'
        required: true
        type: boolean
      suffix:
        description: 'Define the prerelease suffix, e.g. alpha.'
        required: true
        type: string
      publish_target:
        description: 'Define the publish target (None/nuget.org).'
        required: true
        type: string
      dotnet_version:
        description: 'The .NET SDK version that should be used by the runner (e.g. 6.0.x).'
        required: false
        type: string
        default: '6.0.x'

defaults:
  run:
    # Set the default working directory.
    working-directory: src

jobs:
  # Computes version with gitversion.yml.
  compute-version:
    uses: ./.github/workflows/gitversion.yml
    with:
      is_prerelease: ${{ inputs.is_prerelease }}
      suffix: ${{ inputs.suffix }}


  build-and-pack:

    needs: compute-version
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
           
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: ${{ inputs.dotnet_version }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      # Build. Don't run restore again. Use the calculated version as assembly version from the step "compute-version".
      run: dotnet build --no-restore -c ${{ inputs.configuration }} -p:Version=${{ needs.compute-version.outputs.package_version }}
      
    - name: Test
      run: dotnet test --no-build --verbosity normal -c ${{ inputs.configuration }}
      
    - name: Pack
      # Put the nugets into the folder "package_output". Use the calculated version as package version from the step "compute-version".
      if: inputs.do_pack
      run: dotnet pack --no-restore --no-build -o package_output -c ${{ inputs.configuration }} -p:PackageVersion=${{ needs.compute-version.outputs.package_version }}
      
    - name: Upload artifacts
      # Upload all NuGet packages to GitHub. Artifact name "packages".
      if: inputs.do_pack
      uses: actions/upload-artifact@v3
      with:
        name: packages
        path: src/package_output/*.nupkg
        
  publish:
    needs: build-and-pack
    # Publish NuGet packages only on "push" events (merge of PR into develop) or on manual run (on release).
    if: ${{ inputs.do_pack && ( github.event_name == 'push' || github.event_name == 'workflow_dispatch' ) }}
    uses: ./.github/workflows/publish.yml
    with:
      target: ${{ inputs.publish_target }}
    secrets: inherit
